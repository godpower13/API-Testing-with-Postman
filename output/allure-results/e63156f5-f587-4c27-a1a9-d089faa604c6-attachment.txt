//@allure.label.suite=postmannewapitestingdemo
//@allure.label.story=Verifythepostapireturncorrectdata
//@allure.label.categories=demo
//@allure.label.owner=naodeng
//@allure.label.tag=POSTAPI

const Ajv = require('ajv');
const ajv = new Ajv();

// Define the schema
const schema = {
  type: "array",
  items: {
    type: "object",
    properties: {
      userId: { type: "integer" },
      id: { type: "integer" },
      title: { type: "string" },
      body: { type: "string" }
    },
    required: ["userId", "id", "title", "body"]
  }
};

// Get the response JSON
const responseJson = pm.response.json();

// Validate the response
const validate = ajv.compile(schema);
const valid = validate(responseJson);

// Assert the result
//@allure.label.suite=kanekatiallo

pm.test("Response schema is valid", function() {
  pm.expect(valid).to.be.true;

  if (!valid) {
    console.log(validate.errors); // Log validation errors if schema is invalid
  }
});
//Check status code
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//Check status code name value
//@allure.label.suite=aleksisss
pm.test("Status code name has string", function () {
    pm.response.to.have.status("OK");
});
//Check response time
//@allure.label.suite=postmannewapitestingdemo
//@allure.label.story=Verifythepostapireturncorrectdata
//@allure.label.categories=demo
//@allure.label.owner=naodeng
//@allure.label.tag=POSTAPI

pm.test("Response time is less than 300ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(300);
});
//Check response header
pm.test("Content-Type is present", function () {
    pm.response.to.have.header("Content-Type");
});
//Check first item the userId value
// @allure.label.parentSuite=WebInterface
// @allure.label.suite=EssentialFeatures
// @allure.label.subSuite=Authentication
pm.test("Check userId property value", function () {
    var jsonData = pm.response.json();
    console.log(jsonData); // Log the full response
    console.log(jsonData[0].userId); // Log the specific property
    pm.expect(jsonData[0].userId).to.eql(1);
});